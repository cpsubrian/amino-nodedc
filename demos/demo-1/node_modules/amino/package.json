{
  "author": {
    "name": "Carlos Rodriguez",
    "email": "carlos@s8f.org",
    "url": "http://s8f.org/"
  },
  "name": "amino",
  "description": "Clustering framework for Node.js",
  "version": "1.1.3",
  "repository": {
    "type": "git",
    "url": "http://github.com/amino/amino.git"
  },
  "license": "MIT",
  "dependencies": {
    "idgen": "~1.1.1",
    "amino-redis": "~0.0.4",
    "amino-service": "~0.1.0",
    "amino-request": "~0.2.0",
    "amino-spec": "~0.1.0"
  },
  "homepage": "https://github.com/amino/amino",
  "keywords": [
    "load-balancing",
    "failover",
    "cluster",
    "scalability",
    "performance",
    "service",
    "pub/sub",
    "high-availability",
    "cloud",
    "redundancy",
    "ipc"
  ],
  "devDependencies": {
    "mocha": "*"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "Amino\n=====\n\nClustering framework for Node.js\n\n[![build status](https://secure.travis-ci.org/amino/amino.png)](http://travis-ci.org/amino/amino)\n\nIdea\n----\n\nAmino is a toolkit for building clusterable, fault-taulerant apps in Node.js.\n\nFeatures:\n\n- Two robust communications patterns bundled: **publish/subscribe** and\n  **service/request**\n- Decentralized service registry\n- Supports [semver](http://semver.org) specifications\n- Automated host/port assignments and gossiping\n- Built-in load-balancing, sticky sessions, consistent hashing, and failover\n- Enables your app to have no single point of failure\n- Much, much faster and cooler than [hook.io](https://github.com/hookio/) ;)\n- Simple, extensible architecture\n\nInstallation\n------------\n\nIn the root of your project,\n\n```bash\n$ npm install --save amino\n```\n\nTo use the default configuration (requires [redis](http://redis.io) listening\nat `localhost:6379`), simply call:\n\n```javascript\nvar amino = require('amino').init();\n```\n\nPattern #1: publish/subscribe\n-----------------------------\n\n### Method: `amino.publish(ev [, arg, arg...])`\n\nPublishes an event across the cluster, with an optional payload.\n\n- `ev`: Event name, can be any string.\n- `arg`: Argument(s) to pass to subscriber handlers. Note that since data must be\n  serialized, custom javascript class instances will not survive intact. Native\n  objects will attempt to be unserialized via\n  [hydration](https://github.com/carlos8f/hydration).\n\n#### Example\n\n```javascript\namino.publish('cool stuff', {cool: true});\n```\n\n### Method: `amino.subscribe(ev, handler)`\n\nSubscribes to an event.\n\n- `ev`: Event name as passed to `amino.publish()`\n- `handler`: An event handler, which will be passed any arguments that were\n  part of the `publish()` call.\n\n#### Example\n\n```javascript\namino.subscribe('cool stuff', function (stuff) {\n  // stuff.cool == true\n});\n```\n\n### Method: `amino.unsubscribe(ev [, handler])`\n\nUnsubscribes from an event.\n\n- `ev`: Event name as passed to `amino.subscribe()`\n- `handler`: The event handler used with `amino.subscribe()`. If not specified,\n  unsubscribes all handlers of the event.\n\n#### Example\n\n```javascript\namino.unsubscribe('cool stuff', coolStuffHandler);\n```\n\nPattern #2: service/request\n---------------------------\n\n### Method: `amino.createService(service-name[@version] | spec, server)`\n\nRegisters an Amino service.\n\n- `service-name`: The name of your service (should be alpha-numeric/dashes)\n  with an optional [semver](http://semver.org) specification.\n- `spec`: Alternatively, you may specify the full spec of your service, if\n  you already have a port (you will then have to call `listen()` yourself):\n\n  ```javascript\n  var spec = {\n    service: \"service-name@0.1.0\",\n    host: \"server-a\",\n    port: 5678\n  };\n  var service = amino.createService(spec, server);\n  server.listen(spec.port);\n  ```\n- `server`: A server instance returned by `net.createServer()` or\n  `http.createServer()`.\n\nReturns: a `Service` instance.\n\n- (event) `listening`: called when the service has published itself and is\n  available for requests.\n- (property) `spec`: an object containing info about the service (gossiped\n  around the cluster)\n    - `service`: the service name\n    - `version`: the service version, if specified\n    - `host`: the hostname the server is reachable from\n    - `port`: the server's listening port\n    - `id`: a unique string identifying the server\n- (method) `close(onClose)`: close the service and the associated server. Called\n  automatically when the server closes.\n- (event) `close`: called when the service closes.\n\n#### Example\n\nTo create a service, first create a `net` or `http` server:\n\n```javascript\nvar server = require('http').createServer(function (req, res) {\n  res.end('cool stuff');\n});\n```\n\nThen pass the server to `amino.createService()`, which will `listen()` on an\nemphemeral port and broadcast the availability of your service.\n\n```javascript\nvar service = amino.createService('cool-stuff@0.1.0', server);\n```\n\n### Method: `amino.request(service-name[@version], pathSpec [, options, onResponse])`\n\nMakes round-robin requests to Amino `http` services.\n\n- Alternate syntax:\n    - (simple GET): `amino.request('amino://service-name/' [, onResponse])`\n    - (generic HTTP): `amino.request('http://some-site/' [, onResponse])`\n    - (url in options): `amino.request(options, [, onResponse])`\n- `service-name`: the name of the service to request, with an optional\n  [semver](http://semver.org) specification. Can be specified as the first\n  parameter to `amino.request()`, or as the hostname in an amino url such as\n  `amino://service-name/`.\n- `pathSpec`: the path to request, with an optional method before it, such as\n  `POST /posts` or `DELETE /everything`.\n- `options`: options object to pass to the request, containing keys such as\n  `headers` and `body` (for posts, etc.). See\n  [mikeal/request](https://github.com/mikeal/request) for more options.\n- `onResponse`: callback to be called with the arguments `err, res, body` when\n  a response is received.\n\nReturns: an `http.ClientRequest` object.\n\n#### Example\n\n```javascript\nvar req = amino.request('cool-stuff@0.1.x', '/', function (err, res, body) {\n  // body == 'cool stuff'\n});\n```\n\n#### \"Sticky\" sessions\n\nAmino has support for [consistent hashing](http://en.wikipedia.org/wiki/Consistent_hashing)\nwhich can be used to route multiple requests to the same server.\n\nTo enable this feature, pass a special header called `X-Amino-StickyId`\nto requests, containing an IP address, cookie value, or other identifier to\nconsistently route requests with.\n\nNote that as servers are added or removed from the service, sticky routing\ncan be subject to change.\n\n### Method: `amino.requestService(service-name[@version], onSpec)`\n\nRequests a round-robined server for the specified service. Use this for `net`\nservices, or to manually get a server spec for a given service.\n\n- `service-name`: the name of the service to request, with an optional\n  [semver](http://semver.org) specification.\n- `onSpec`: callback to be called with a server `spec` object containing:\n    - `service`: the service name\n    - `version`: the service version, if specified\n    - `host`: the hostname the server is reachable from\n    - `port`: the server's listening port\n    - `id`: a unique string identifying the server\n\nReturns: a `ServiceRequest` instance:\n\n- (event) `spec`: called with the `spec` object.\n- (property) `headers`: an array of headers for the request (used internally)\n\n#### Example\n\n```javascript\namino.requestService('cool-stuff@0.1.x', function (spec) {\n  // now we can connect to spec.host/spec.port\n});\n```\n\nConfiguration\n-------------\n\nAmino is bundled with three plugins by default:\n[amino-redis](https://github.com/amino/amino-redis),\n[amino-service](https://github.com/amino/amino-service), and\n[amino-request](https://github.com/amino/amino-request).\n\nCore plugins can be configured by passing options to `init()`.\n\n```javascript\nvar amino = require('amino')\n  .init({\n    redis: redis options...\n    service: service options...\n    request: request options...\n  });\n```\n\nTo disable a plugin, just pass `false`.\n\n### Redis options\n\n- To specify a single redis server, just pass a `host`, `port`, or `host:port` to\n  `init`, for example:\n\n  ```javascript\n  var amino = require('amino')\n    .init({\n      redis: \"1.2.3.4:5679\"\n    });\n  ```\n- To use multiple redis servers for failover/load-balancing, just pass an array\n  of servers. See [haredis](https://github.com/carlos8f/haredis) for more\n  information.\n- To pass options to the redis client:\n\n  ```javascript\n  var amino = require('amino')\n    .init({\n      redis: {\n        nodes: \"1.2.3.4:5679\",\n        node_redis/haredis options here...\n      }\n    });\n  ```\n\n### Service options\n\n- `host`: By default, Amino will auto-detect your server's network IP by\n  performing a DNS lookup on the server's `hostname`. If you already know the\n  correct IP (or hostname) to use, you can specify it with this option.\n\n### Request options\n\n- `specRequestThrottle`: interval (in ms) to throttle publishes when requesting\n  specs for a service. (Default: `5000`)\n- `specRequestInterval`: interval (in ms) to request \"straggler\" specs for all\n  services. (Default: `120000`)\n- `readyTimeout`: time (in ms) before a service is deemed \"ready\" after getting\n  the first spec. (Default: `200`)\n- (other options will also be passed to `http.Agent` constructor)\n\nExtending Amino\n---------------\n\nTo extend Amino, simply create a module which exports an `attach` function, which\nwill be called in Amino's scope:\n\n```javascript\nexports.attach = function (options) {\n  var amino = this;\n  // extend amino!\n});\n```\n\nTo load the plugin, call `amino.use()`:\n\n```javascript\nvar amino = require('amino')\n  .use(require('my-plugin'), {options...})\n  .init();\n```\n\n---\n\nDeveloped by [Terra Eclipse](http://www.terraeclipse.com)\n---------------------------------------------------------\n\nTerra Eclipse, Inc. is a nationally recognized political technology and\nstrategy firm located in Aptos, CA and Washington, D.C.\n\n[http://www.terraeclipse.com](http://www.terraeclipse.com)\n\n\nLicense: MIT\n------------\n\n- Copyright (C) 2012 Carlos Rodriguez (http://s8f.org/)\n- Copyright (C) 2012 Terra Eclipse, Inc. (http://www.terraeclipse.com/)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "amino@1.1.3",
  "_from": "amino@~1.1.3"
}
