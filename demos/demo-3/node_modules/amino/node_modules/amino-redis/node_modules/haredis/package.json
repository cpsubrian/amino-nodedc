{
  "author": {
    "name": "Carlos Rodriguez",
    "email": "carlos@s8f.org",
    "url": "http://s8f.org/"
  },
  "name": "haredis",
  "description": "High-availability redis in Node.js",
  "version": "0.2.8",
  "repository": {
    "type": "git",
    "url": "git://github.com/carlos8f/haredis.git"
  },
  "main": "./lib",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "redis": "~0.7.2",
    "async": "~0.1.22",
    "pkginfo": "~0.2.3"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "haredis\n-------\n\nHigh-availability redis in Node.js\n\nIdea\n====\n\n**haredis** is a code wrapper around [node_redis](https://github.com/mranney/node_redis)\nwhich adds fault-taulerance to your application.\n\nFeatures:\n\n- Drop-in replacement for [node_redis](https://github.com/mranney/node_redis)\n- Easily build a cluster out of 3 or more (default-configured) redis servers\n- Auto-failover due to connection drops\n- Master conflict resolution (default your servers to master, and **haredis**\n  will elect the freshest and issue the `SLAVEOF` commands)\n- Freshness judged by an opcounter (incremented on write)\n- Locking mechanism to prevent failover contention\n- Load-balancing for reads and pub/sub\n- One-client pub/sub\n- Gossip channel for quick failover\n\nUsage\n=====\n\nStart up multiple redis daemons, with no special configuration necessary, and\nlist them like so:\n\n```javascript\nvar redis = require('haredis')\n  , nodes = ['1.2.3.1:6379', '1.2.3.2:6379', '1.2.3.3:6379']\n  , client = redis.createClient(nodes)\n  ;\n```\n\n...then use `client` as you would use [node_redis](https://github.com/mranney/node_redis).\nIf the master node goes down, **haredis** will automatically determine which node\nto promote to master, and keep standby connections to the others.\n\nIf multiple **haredis** clients are connected, a locking mechanism is implemented\nto prevent contention between failover attempts.\n\nTo see this in action,\n\n- Set up 3 local redis daemons on ports 6380-82\n- 6380 should be `SLAVEOF NO ONE`. 6381 and 82 should be slaves to 6380.\n- Run `test/basic.js` or `test/pubsub.js` (try multiple to test contention)\n- Kill the process listening on 6380 (master). **haredis** will auto-failover to\n  the node it detects is freshest, set that to master, and the others to slaves!\n- Bring up 6380, and it will be added as standby for failover.\n\nAPI difference: createClient\n============================\n\nIn **haredis**, `createClient` works like this:\n\n```javascript\nfunction createClient([host/port array], options)\n```\n\nThe first argument can be an array of hosts (using default port), ports (using\nlocalhost), or colon-separated strings (i.e., `1.2.3.4:6379`). **haredis** will\nattempt to connect to all of these servers.\n\n`options` corresponds to the same options you would pass\n[node_redis](https://github.com/mranney/node_redis). **haredis**\nadditionally supports:\n\n- `haredis_db_num` {Number} database number that **haredis** should store metadata\n  in (such as an opcounter). Defaults to `15`.\n\nLoad-balancing\n==============\n\n**haredis** can also load-balance read operations to random slaves. Pub/sub\nsubscriptions will automatically try to use a slave. For normal read-only\ncommands, you can choose to query a random slave by using the `slaveOk()` method:\n\n```javascript\nclient.slaveOk().GET('foo', function(err, reply) { ...\n```\n\n`slaveOk()` will only affect the current command.\n\nTo load-balance all reads, you can set `options.auto_slaveok = true` in\n`createClient()`. Be advised that this can case problems due to replication delay!\n\nOne-client pub/sub\n==================\n\nIn redis, pub/sub is a \"mode\" which excludes the use of regular commands while\nsubscriptions are active. Normally you need to make separate client objects to\nuse `publish` on one and `subscribe` on the other.\n\n**haredis** adds the nice ability to use pub/sub simultaneously with regular\ncommands. This is because it keeps internal redis clients in pub/sub mode for\ninternal \"gossip\", but also makes it available for users. Of course this is\noptional, and you can always maintain a separate `haredis` client for subscribes\nif you wish.\n\nAdvice\n======\n\nFor proper failover, a majority of the nodes need to be still online. This means\nthat the minimum number of nodes should be 3. Under the minimum setup, you can\nlose up to 1 node. If only 1/3 are up, commands will be queued indefinitely until\nanother node comes up.\n\nDebugging/verbose logging\n=========================\n\nTo see what's under the hood, try setting `redis.debug_mode = true`, and you can\nsee the failover process in detail:\n\n```\n[19:27:58](#1) warning: MASTER is down! (127.0.0.1:6380)\n[19:27:58](#1) info: reorientating (node down) in 2000ms\nRedis connection gone from end event.\n[19:28:00](#1) info: orientating (node down, 2/3 nodes up) ...\n[19:28:00](#1) warning: invalid master count: 0\n[19:28:00](#1) info: attempting failover!\n[19:28:00](#1) info: my failover id: gP0SCM1B\n[19:28:00](#1) info: lock was a success!\n[19:28:00](#1) info: 127.0.0.1:6381 had highest opcounter (1441) of 2 nodes. congrats!\n[19:28:00](#1) info: making 127.0.0.1:6382 into a slave...\n[19:28:00](#1) info: 127.0.0.1:6382 is slave\n[19:28:00](#1) info: publishing gossip:master for 127.0.0.1:6381\n[19:28:00](#1) info: renegotating subSlave away from master\n[19:28:00](#1) info: subSlave is now 127.0.0.1:6382\n[19:28:00](#1) info: ready, using 127.0.0.1:6381 as master\n```\n\nTo get info on which commands are executed on which servers, try setting\n`redis.command_logging = true`.\n\nRunning tests\n=============\n\n**haredis** includes the test suite from [node_redis](https://github.com/mranney/node_redis)\nwhich can be run in single or clustered mode.\n\nIf you have redis daemons running locally on ports 6380, 6381 and 8382, you can\nrun the clustered test with:\n\n```bash\n$ make test-cluster\n```\n\nOr in single-mode with a redis server on port 6379:\n\n```bash\n$ make test\n```\n\nLICENSE - \"MIT License\"\n=======================\n\n- Copyright (c) 2012 Carlos Rodriguez, http://s8f.org/\n- Copyright (c) 2012 Terra Eclipse, Inc., http://www.terraeclipse.com/\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "haredis@0.2.8",
  "_from": "haredis@~0.2.8"
}
